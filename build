#!/bin/sh

# Default DSM version and arch
#  ↓
export DSM=7.0
export ARCH=avoton
export WORKSPACE=$(test -d /workspace && echo "/workspace" || readlink -f $(dirname $0))
export TOOLKIT=/toolkit
export CONFIG=package.json
export OUTPUT=$WORKSPACE/dist
export SRC_STUBS=$WORKSPACE/stubs/src
export PKG_STUBS=$WORKSPACE/stubs/synology
export BLD_STUBS=$WORKSPACE/stubs/SynoBuildConf

# Parse script arguments for dsm version and arch
#  ↓
while getopts ":v:p:o:c:s:" opt; do
    case $opt in
    v)
        export DSM="$OPTARG"
        shift 2
        ;;
    p)
        export ARCH="$OPTARG"
        shift 2
        ;;
    o)
        export OUTPUT=$(readlink -f $OPTARG)
        shift 2
        ;;
    c)
        export CONFIG=$(readlink -f $OPTARG)
        shift 2
        ;;
    s)
        export SRC_STUBS=$(readlink -f $OPTARG)
        shift 2
        ;;
    k)
        export PKG_STUBS=$(readlink -f $OPTARG)
        shift 2
        ;;
    b)
        export BLD_STUBS=$(readlink -f $OPTARG)
        shift 2
        ;;
    \?)
        echo "Invalid option -$OPTARG" >&2
        exit 1
        ;;
    esac
done

# Ensure Build Stubs basename is "SynoBuildConf"
if [ ! -d "$BLD_STUBS" ]; then
    echo "Build stubs folder $BLD_STUBS does not exist" >&2
    exit 1
fi

# Ensure Source Stubs exists
if [ ! -d "$SRC_STUBS" ]; then
    echo "Source stubs folder $SRC_STUBS does not exist" >&2
    exit 1
fi

# Ensure Package Stubs exists
if [ ! -d "$PKG_STUBS" ]; then
    echo "Package stubs folder $PKG_STUBS does not exist" >&2
    exit 1
fi

(
    echo "Workspace         : $WORKSPACE"
    echo "Config file       : $CONFIG"
    echo "Source stubs      : $SRC_STUBS"
    echo "Package stubs     : $PKG_STUBS"
    echo "Build stubs       : $BLD_STUBS"
    echo "Output folder     : $OUTPUT"
    echo "DSM version       : $DSM"
    echo "Architecture      : $ARCH"
) >&2

# Prepare build environment
# https://help.synology.com/developer-guide/getting_started/prepare_environment.html
#  ↓
if [ ! -d "$TOOLKIT/pkgscripts-ng" ]; then
    echo "::group::Prepare build environment" >&2
    git clone https://github.com/SynologyOpenSource/pkgscripts-ng $TOOLKIT/pkgscripts-ng
    echo "::endgroup::" >&2
fi

# Make sure the OUTPUT folder exists
#  ↓
mkdir -p $OUTPUT

# Set safe directory
#  ↓
git config --global --add safe.directory $TOOLKIT/pkgscripts-ng

# Check if the Arch is supported
#  ↓
if [ "$ARCH" != "noarch" ]; then

    echo "::group::Deploy Chroot Environment For $ARCH-$DSM Target" >&2

    # Deploy Chroot Environment For Different NAS Target
    # https://help.synology.com/developer-guide/getting_started/prepare_environment.html
    #  ↓
    if [ ! -d "$TOOLKIT/build_env/ds.$ARCH-$DSM" ] || [ ! -f "$TOOLKIT/build_env/ds.$ARCH-$DSM/PkgVersion" ]; then
        mkdir -p $TOOLKIT/build_env
        cd $TOOLKIT/pkgscripts-ng/
        git checkout DSM$DSM || exit 1
        ./EnvDeploy --version $DSM -p $ARCH >&2 || exit 1
        cd -
    else
        echo "Chroot environment for $ARCH-$DSM already exists" >&2
    fi >&2

    echo "::endgroup::" >&2
fi

# Reset source folder link
#  ↓
rm -rf $TOOLKIT/source
mkdir -p $TOOLKIT/source

# Define to camel case
toCamelCase() {
    echo $1 | awk '{                                                          
        split($0, words, "-");                                                
        for (i in words) {                                                    
            word = words[length(words)+1-i];                                  
                printf toupper(substr(word, 1, 1)) tolower(substr(word, 2));  
        }                                                                     
    }'
}

# For each project in subsequent arguments in the form of name:folder, create a symlink to the folder and build
while [ $# -gt 0 ]; do

    case "$1" in
    *:*)
        export SOURCE=${1#*:}
        export PACKAGE=$(toCamelCase ${1%:*})
        ;;
    .*)
        export SOURCE=$1
        export PACKAGE=$(toCamelCase $(basename $1))
        ;;
    esac

    # Check source folder
    if [ ! -d "$WORKSPACE/$SOURCE" ]; then
        echo "Source folder $WORKSPACE/$SOURCE does not exist" >&2
        exit 1
    fi

    echo "::group::Regroup stubs & files" >&2

    # Prepare source with stubs
    echo "Copy $PKG_STUBS/* -> $TOOLKIT/source/$PACKAGE" >&2
    mkdir -p $TOOLKIT/source/$PACKAGE
    cp -rfp $PKG_STUBS/* $TOOLKIT/source/$PACKAGE || exit 1

    echo "Copy $SRC_STUBS/* -> $TOOLKIT/source/$PACKAGE/src" >&2
    mkdir -p $TOOLKIT/source/$PACKAGE/src
    cp -rfp $SRC_STUBS/* $TOOLKIT/source/$PACKAGE/src || exit 1

    echo "Copy $BLD_STUBS/* -> $TOOLKIT/source/$PACKAGE/SynoBuildConf" >&2
    mkdir -p $TOOLKIT/source/$PACKAGE/SynoBuildConf
    cp -rfp $BLD_STUBS/* $TOOLKIT/source/$PACKAGE/SynoBuildConf || exit 1

    # Copy config file
    echo "Copy $WORKSPACE/$SOURCE/$CONFIG -> $TOOLKIT/source/$PACKAGE/config.json" >&2
    cp -fp "$WORKSPACE/$SOURCE/$CONFIG" "$TOOLKIT/source/$PACKAGE/config.json" || exit 1

    # Copy package definition
    echo "Copy $WORKSPACE/$SOURCE/synology -> $TOOLKIT/source/$PACKAGE" >&2
    cp -rfp $WORKSPACE/$SOURCE/synology/* $TOOLKIT/source/$PACKAGE || exit 1

    # Copy package source
    echo "Copy $WORKSPACE/$SOURCE/src -> $TOOLKIT/source/$PACKAGE" >&2
    cp -rfp $WORKSPACE/$SOURCE/src/* $TOOLKIT/source/$PACKAGE/src || exit 1

    echo "::endgroup::" >&2

    # Include docker images if needed
    echo "::group::Retrieve docker images for $PACKAGE"
    $(dirname $0)/build.docker
    echo "::endgroup::"

    # Build
    echo "::group::Build $PACKAGE for DSM$DSM on $ARCH" >&2
    cd $TOOLKIT
    pkgscripts-ng/PkgCreate.py -c -p $ARCH -v $DSM $PACKAGE >&2 || exit 1
    echo "::endgroup::" >&2

    # Push to output folder
    echo "::group::Collect $PACKAGE for DSM$DSM on $ARCH" >&2
    mkdir -p $OUTPUT
    find $TOOLKIT/result_spk/ -maxdepth 3 -name "*.spk" ! -type d ! -path "*.bad.*" -exec cp {} $OUTPUT/ \;
    echo "::endgroup::" >&2

    # Next package
    shift
done
