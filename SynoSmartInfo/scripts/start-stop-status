#!/bin/bash

PACKAGE="SynoSmartInfo"
FLASK_DAEMON="/var/packages/$PACKAGE/target/bin/smart_api.py"
NODE_DAEMON="/var/packages/$PACKAGE/target/ui/server.js"
NODE_DIR="/var/packages/$PACKAGE/target/ui"

FLASK_PID_FILE="/var/packages/$PACKAGE/var/smart_api.pid"
NODE_PID_FILE="/var/packages/$PACKAGE/var/node_server.pid"

FLASK_LOG_FILE="/var/packages/$PACKAGE/var/smart_api.log"
NODE_LOG_FILE="/var/packages/$PACKAGE/var/node_server.log"

start_flask_daemon() {
    echo "Starting $PACKAGE Flask daemon..."
    if [ -f "$FLASK_PID_FILE" ] && kill -0 "$(cat "$FLASK_PID_FILE")" 2>/dev/null; then
        echo "Flask daemon already running."
        return 0
    fi

    nohup /usr/bin/env python3 "$FLASK_DAEMON" > "$FLASK_LOG_FILE" 2>&1 &
    PID=$!
    echo $PID > "$FLASK_PID_FILE"
    echo "$PACKAGE Flask daemon started with PID $PID"
}

start_node_daemon() {
    echo "Starting $PACKAGE Node.js daemon..."
    if [ -f "$NODE_PID_FILE" ] && kill -0 "$(cat "$NODE_PID_FILE")" 2>/dev/null; then
        echo "Node.js daemon already running."
        return 0
    fi

    if [ ! -f "$NODE_DAEMON" ]; then
        echo "Node.js server file not found: $NODE_DAEMON"
        return 1
    fi

    cd "$NODE_DIR" || { echo "Failed to change directory to $NODE_DIR"; return 1; }
    nohup node server.js > "$NODE_LOG_FILE" 2>&1 &
    PID=$!
    echo $PID > "$NODE_PID_FILE"
    echo "$PACKAGE Node.js daemon started with PID $PID"
}

start_daemon() {
    start_flask_daemon
    FLASK_RESULT=$?
    
    start_node_daemon
    NODE_RESULT=$?
    
    if [ $FLASK_RESULT -eq 0 ] && [ $NODE_RESULT -eq 0 ]; then
        echo "All daemons started successfully."
        return 0
    else
        echo "Some daemons failed to start."
        return 1
    fi
}

stop_flask_daemon() {
    echo "Stopping $PACKAGE Flask daemon..."
    if [ ! -f "$FLASK_PID_FILE" ]; then
        echo "Flask PID file not found."
        return 1
    fi

    PID=$(cat "$FLASK_PID_FILE")
    if kill -0 "$PID" 2>/dev/null; then
        kill "$PID"
        sleep 2
        if kill -0 "$PID" 2>/dev/null; then
            echo "Force killing Flask daemon..."
            kill -9 "$PID"
        fi
        rm -f "$FLASK_PID_FILE"
        echo "$PACKAGE Flask daemon stopped."
        return 0
    else
        echo "Flask daemon process not running."
        rm -f "$FLASK_PID_FILE"
        return 1
    fi
}

stop_node_daemon() {
    echo "Stopping $PACKAGE Node.js daemon..."
    if [ ! -f "$NODE_PID_FILE" ]; then
        echo "Node.js PID file not found."
        return 1
    fi

    PID=$(cat "$NODE_PID_FILE")
    if kill -0 "$PID" 2>/dev/null; then
        kill "$PID"
        sleep 2
        if kill -0 "$PID" 2>/dev/null; then
            echo "Force killing Node.js daemon..."
            kill -9 "$PID"
        fi
        rm -f "$NODE_PID_FILE"
        echo "$PACKAGE Node.js daemon stopped."
        return 0
    else
        echo "Node.js daemon process not running."
        rm -f "$NODE_PID_FILE"
        return 1
    fi
}

stop_daemon() {
    stop_flask_daemon
    FLASK_RESULT=$?
    
    stop_node_daemon
    NODE_RESULT=$?
    
    if [ $FLASK_RESULT -eq 0 ] || [ $NODE_RESULT -eq 0 ]; then
        echo "Daemons stopped."
        return 0
    else
        echo "No daemons were running."
        return 1
    fi
}

daemon_status() {
    FLASK_RUNNING=0
    NODE_RUNNING=0
    
    # Flask daemon status
    if [ -f "$FLASK_PID_FILE" ]; then
        PID=$(cat "$FLASK_PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo "$PACKAGE Flask daemon running with PID $PID"
            FLASK_RUNNING=1
        else
            echo "$PACKAGE Flask daemon not running, but PID file exists."
        fi
    else
        echo "$PACKAGE Flask daemon not running."
    fi
    
    # Node.js daemon status
    if [ -f "$NODE_PID_FILE" ]; then
        PID=$(cat "$NODE_PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo "$PACKAGE Node.js daemon running with PID $PID"
            NODE_RUNNING=1
        else
            echo "$PACKAGE Node.js daemon not running, but PID file exists."
        fi
    else
        echo "$PACKAGE Node.js daemon not running."
    fi
    
    # Return status: 0 if at least one daemon is running
    if [ $FLASK_RUNNING -eq 1 ] || [ $NODE_RUNNING -eq 1 ]; then
        return 0
    else
        return 1
    fi
}

case "$1" in
    start)
        start_daemon
        ;;
    stop)
        stop_daemon
        ;;
    restart)
        stop_daemon
        sleep 1
        start_daemon
        ;;
    status)
        daemon_status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
esac

exit 0
