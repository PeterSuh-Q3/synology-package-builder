#!/bin/sh
# Copyright (C) 2000-2020 Synology Inc. All rights reserved.

# Entry point for installing the package into the PKG_DIR.
echo "************************************************************"
echo "  Running Default SynoBuildConf/install for <$1>"
echo "************************************************************"

# Define key variables for package build process
PKG_NAME=$1
PKG_CONF="."
INST_DIR="/tmp/_install_${PKG_NAME}"
PKG_DIR="/tmp/_package_${PKG_NAME}"
PKG_DEST="/image/packages"

# Load Synology's SPK packaging utility functions
source /pkgscripts/include/pkg_util.sh

# Function to prepare directories for the build process
prepare_dirs() {

	echo "→ Preparing directories for package build..."

	# prepare install and package dir
	for dir in $INST_DIR $PKG_DIR; do
		rm -rf "$dir"
	done

	for dir in $INST_DIR $PKG_DIR $PKG_DEST; do
		mkdir -p "$dir" # use default mask
	done
}

# Function to copy files from the source directory to the install directory
install_files() {
	local src=$1
	local filter=${2:-*}

	echo "→ Install files from ./target/$src/$filter to ${INST_DIR}/$src"

	test -d ${INST_DIR}/$src || install -d ${INST_DIR}/$src
	test -n "$(ls -A ./target/$src/$filter 2>/dev/null)" && cp -a ./target/$src/$filter ${INST_DIR}/$src
}

# Function to create the package.tgz file from the install directory
create_tgz() {

	echo "→ Creating package.tgz from install dir..."

	# Prepare directories
	prepare_dirs $INST_DIR $PKG_DIR

	# Copy UI files if present
	install_files ui

	# Copy docker images if present
	install_files docker

	# Copy configuration files
	install_files conf

	# Create package.tgz from install directory
	pkg_make_package ${INST_DIR} ${PKG_DIR}
}

# Function to build INFO file entries from config.json using jq
build_entry() {
	local name=$1
	local source=$2
	local rule=$3
	local default=$4

	local value=$(test -f "$source" && jq -r "$rule" "$source" --arg default "$default" || echo "$source")
	test -n "$value" && echo $name="\"$value\""
}

# Generate the INFO file for the package from config.json
create_info() {

	local json=$PWD/config.json

	echo "Creating INFO file from <$json>..." >&2

	# Load package name
	local package=$(jq -r '.name//$default' $json --arg default $PackageName)

	# Load name
	build_entry 'package' ${package##*/}

	# Load version
	build_entry 'version' $json '.version // $default' '0.0.0'

	# Load description
	build_entry 'description' $json '.description // $default' 'Built with github.com/tomgrv/synology-package-builder'

	# Load maintainer and maintainer URL
	build_entry 'maintainer' $json '.synology.maintainer // .author.name // $default' ${package%/*}
	build_entry 'maintainer_url' $json '.synology.maintainer_url // .homepage // $default' 'https://www.github.com/tomgrv/synology-package-builder'
	build_entry 'distributor' $json '.synology.distributor // $default' 'Synology Package Builder'
	build_entry 'distributor_url' $json '.synology.distributor_url // $default' 'https://www.github.com/tomgrv/synology-package-builder'
	build_entry 'support_url' $json '.synology.support_url // .bugs.url // $default' 'https://www.github.com/tomgrv/synology-package-builder/issues'
	build_entry 'helpurl' $json '.synology.help_url // .synology.helpurl // $default' 'https://www.github.com/tomgrv/synology-package-builder#readme'

	# Load DSM version and architecture requirements
	build_entry 'os_min_ver' $json '.synology.os_min_ver // if .os | type == "array" then .os[] | select(startswith("dsm:")) | sub("dsm:"; "") else $default end' 7.0-40337
	build_entry 'os_max_ver' $json '.synology.os_max_ver // empty'
	build_entry 'arch' $json '.synology.arch // if .cpu | type == "array" then .cpu[] | select(startswith("dsm:")) | sub("dsm:"; "") else $default end' $(pkg_get_platform_family)
	build_entry 'displayname' $json '.synology.displayname // .displayname // $default' $package

	# Mark as third-party package
	build_entry 'thirdparty' 'yes'

	# Mark as beta if version contains a dash
	case "$version" in
	*-*) build_entry 'beta' 'true' ;;
	*) build_entry 'beta' 'false' ;;
	esac

	#echo model=\'$(jq -r 'if .dsmConfig | type == "array" then .dsmConfig.model | join(" ") else "" end ' $json)\'
	#
	#### DSM Configuration
	#echo adminport=$(jq -r '.dsmConfig.adminport // .config.admin.port // ""' $json)
	#echo adminurl=$(jq -r '.dsmConfig.adminurl  // .config.admin.url // ""' $json)
	#echo adminprotocol=$(jq -r '.dsmConfig.adminprotocol // .config.admin.protocol // ""' $json)
	#
	#echo dsmuidir=$(jq -r '.dsmConfig.dsmuidir // .dsmConfig.uidir // if .dsmConfig.uidir | type == "array" then .dsmConfig.uidir[] | to_entries | map("\(.key):\(.value)") | join(" ") else null end // $default' $json --arg default "ui")
	#echo dsmappname=$(jq -r 'if .dsmConfig.dsmappname | type == "array" then .dsmConfig.dsmappname | join(" ") else null end // if .dsmConfig.appname | type == "array" then  .dsmConfig.appname | join(" ") else null end // $default' $json --arg default ${package##*/})
	#echo dsmapppage=$(jq -r '.dsmConfig.dsmapppage // .dsmConfig.apppage // ""' $json)
	#echo dsmapplaunchname=\'$(jq -r '.dsmConfig.dsmapplaunchname // .dsmConfig.applaunchname // $default' $json --arg default ${package##*/})\'

	# Load package dependencies
	echo install_dep_packages=\"$(

		jq 'if .dsmConfig.install_dep_packages | type == "array" then .dsmConfig.install_dep_packages | to_entries | map("\(.key)\(.value)") | join(":") else empty end' $json

		# Add ContainerManager dependency if docker resource is present
		jq -e 'has("docker")' $PKG_CONF/conf/resource >/dev/null && echo "ContainerManager>=20.0.0-0"

	)\"

}

# Create the final .spk package
create_spk() {

	echo "Creating spk..."

	# Copy scripts, conf, and wizard UI files
	test -d $PKG_DIR || install -d $PKG_DIR
	test -d $PKG_DIR/scripts || install -d $PKG_DIR/scripts
	cp -av $PKG_CONF/scripts/* $PKG_DIR/scripts && chmod 755 $PKG_DIR/scripts/*

	test -d $PKG_DIR/conf || install -d $PKG_DIR/conf
	cp -av $PKG_CONF/conf/* $PKG_DIR/conf

	test -d $PKG_DIR/WIZARD_UIFILES || install -d $PKG_DIR/WIZARD_UIFILES
	cp -av $PKG_CONF/WIZARD_UIFILES/* $PKG_DIR/WIZARD_UIFILES

	# Copy LICENSE and icons if present
	test -f LICENSE && cp -av LICENSE $PKG_DIR || echo "No LICENSE file found"
	test -f $PKG_CONF/PACKAGE_ICON.PNG && cp -av $PKG_CONF/PACKAGE_ICON.PNG $PKG_DIR || echo "No 72x72 icon found"
	test -f $PKG_CONF/PACKAGE_ICON_256.PNG && cp -av $PKG_CONF/PACKAGE_ICON_256.PNG $PKG_DIR || echo "No 256x256 icon found"

	# Create INFO file
	create_info | tee ./INFO | tee $PKG_DIR/INFO

	# Build the final .spk package and place it in the output directory
	mkdir -p ${PKG_DEST}
	pkg_make_spk ${PKG_DIR} ${PKG_DEST} $(pkg_get_spk_family_name)
}

# prepare install and package dir
for dir in $INST_DIR $PKG_DIR; do
	rm -rf "$dir"
done

for dir in $INST_DIR $PKG_DIR $PKG_DEST; do
	mkdir -p "$dir" # use default mask
done

create_tgz

create_spk
